// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver');
let chrome = require('selenium-webdriver/chrome');
const assert = require('assert');
const { doesNotMatch } = require('assert');

describe('Default Suite', function () {
  this.timeout(300000);
  let driver;
  let vars;
  beforeEach(async function () {
    driver = await new Builder()
      .forBrowser('chrome')
      .setChromeOptions(new chrome.Options().headless())
      .build();
    vars = {};
    await driver.get(
      'http://0xd1c561fed4d6c59f63a500f3e2746705a11e8530.dev.mintgate.io'
    );
    await driver.executeScript(
      'return window.localStorage.setItem("seleniumLogin", "true");'
    );
    await driver.executeScript(
      'return window.localStorage.setItem("getstarted", "false");'
    );
    await driver
      .navigate()
      .to(
        'http://0xd1c561fed4d6c59f63a500f3e2746705a11e8530.dev.mintgate.io/login?signature=0xe6339cdfd2e94ce009e117bd8e21f0d07894195de16049a7e8084939ecf293d27498504ca7b4299ce5b5ed21ddf83da28685238b241997e46c30be5908108a551b&wallet=0xD1C561FEd4D6C59f63a500f3e2746705A11e8530'
      );
    await driver.manage().setTimeouts({ implicit: 10000 });
    await driver.wait(until.elementLocated(By.id('userDropdown')), 50000);
    await driver.findElement(By.id('userDropdown')).click();
    await driver.wait(
      until.elementLocated(By.xpath("(//a[contains(@href, '/admin')])[2]")),
      50000
    );
    await driver
      .findElement(By.xpath("(//a[contains(@href, '/admin')])[2]"))
      .click();
    await driver.wait(until.elementLocated(By.id('Domain')), 50000);
    await driver.findElement(By.id('Domain')).click();
  });
  afterEach(async function () {
    const result = await getDone();
    assert.equal(result, 'done');
    await driver.quit();
  });

  async function getDone() {
    return 'done';
  }

  it('Add Whitelabel', async function () {
    await driver.wait(until.elementLocated(By.id('origin')), 30000);
    await driver.findElement(By.id('origin')).click();
    await driver.findElement(By.id('origin')).sendKeys('testing.tkngate.com');
    await driver.findElement(By.id('name')).click();
    await driver.findElement(By.id('name')).sendKeys('Testing Dev');
    {
      const dropdown = await driver.findElement(By.id('network'));
      await dropdown
        .findElement(By.xpath("//option[. = 'Default - Polygon']"))
        .click();
    }
    await driver.findElement(By.id('permissions')).click();
    {
      const dropdown = await driver.findElement(By.id('permissions'));
      await dropdown
        .findElement(
          By.xpath(
            "//option[. = 'Collaboration - Only you and collaborators can create']"
          )
        )
        .click();
    }
    await driver.findElement(By.id('saveSettings')).click();
    await driver.wait(until.alertIsPresent());
    let settingsAlert = await driver.switchTo().alert();
    (await settingsAlert.getText()) == 'Your Settings are now updated.';
    await settingsAlert.accept();
  });

  it('Delete Whitelabel', async function () {
    await driver.wait(
      until.elementLocated(By.id('configurationStatus')),
      30000
    );
    await driver.executeScript('window.scrollBy(0,3000)');
    await driver.wait(until.elementLocated(By.id('deleteDomain')), 30000);
    await driver.findElement(By.id('deleteDomain')).click();
    await driver.wait(until.alertIsPresent());
    let deleteConfirmation = await driver.switchTo().alert();
    (await deleteConfirmation.getText()) ==
      'Are you sure you want to delete this domain? This will delete your site.';
    await deleteConfirmation.accept();
    await driver.wait(until.alertIsPresent());
    let deleteMessage = await driver.switchTo().alert();
    (await deleteMessage.getText()) == 'Deleted Domain';
    await deleteMessage.accept();
  });
});
